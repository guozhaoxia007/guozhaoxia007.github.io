<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on 喵大人的博客</title>
    <link>http://guozhaoxia007.github.io/categories/python/</link>
    <description>Recent content in Python on 喵大人的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 22 Feb 2016 15:48:44 +0800</lastBuildDate>
    
	<atom:link href="http://guozhaoxia007.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>python IDE</title>
      <link>http://guozhaoxia007.github.io/post/2016/02/python-ide/</link>
      <pubDate>Mon, 22 Feb 2016 15:48:44 +0800</pubDate>
      
      <guid>http://guozhaoxia007.github.io/post/2016/02/python-ide/</guid>
      <description>VIM 1. 参考链接： https://github.com/yangyangwithgnu/use_vim_as_ide https://github.com/spf13/spf13-vim
2. install sudo pip install pyflakes
sudo pip install pylint
sudo pip install pep8
或者使用这个vim插件
https://github.com/scrooloose/syntastic
3. 我的vimrc call pathogen#infect() syntax enable syntax on set background=dark set number set tabstop=4 set softtabstop=4 set shiftwidth=4 set expandtab set laststatus=2 set ruler &amp;quot; set cursorcolumn &amp;quot; 突出显示当前列 set cursorline &amp;quot; 突出显示当前行 set hlsearch set incsearch set ignorecase set autoindent set nowrap set showcmd &amp;quot; 显示输入命令 let g:solarized_termcolors=16 colorscheme solarized set textwidth=79 autocmd FileType text setlocal textwidth=78 &amp;quot; 一旦一行的字符超出79个的话就把那些字符的背景设为红色 highlight OverLength ctermbg=red ctermfg=white guibg=#592929 match OverLength /\%80v.</description>
    </item>
    
    <item>
      <title>函数式编程</title>
      <link>http://guozhaoxia007.github.io/post/2016/02/functional_programming/</link>
      <pubDate>Sun, 21 Feb 2016 01:09:41 +0800</pubDate>
      
      <guid>http://guozhaoxia007.github.io/post/2016/02/functional_programming/</guid>
      <description>函数式编程 高阶函数 def add(x, y, f): return f(x) + f(y) &amp;gt;&amp;gt;&amp;gt; add(-3, 2, abs) 5 &amp;gt;&amp;gt;&amp;gt; map(abs, [1, -2, -5]) [1, 2, 5] 常见的内置高阶函数 map/filter/reduce/sorted
返回函数 def f(): print &amp;#39;call f()...&amp;#39; # 定义函数g: def g(): print &amp;#39;call g()...&amp;#39; # 返回函数g: return g &amp;gt;&amp;gt;&amp;gt; x = f() # 调用f() call f()... &amp;gt;&amp;gt;&amp;gt; x # 变量x是f()返回的函数： &amp;lt;function g at 0x1037bf320&amp;gt; &amp;gt;&amp;gt;&amp;gt; x() # x指向函数，因此可以调用 call g()... # 调用x()就是执行g()函数定义的代码 延迟计算
闭包 def f(): print &amp;#39;f().</description>
    </item>
    
    <item>
      <title>pytz</title>
      <link>http://guozhaoxia007.github.io/post/2016/02/pytz/</link>
      <pubDate>Sat, 20 Feb 2016 23:18:34 +0800</pubDate>
      
      <guid>http://guozhaoxia007.github.io/post/2016/02/pytz/</guid>
      <description>pytz使用 使用场景  查询，如果前端输入start_time, end_time，后台计算月报（每天开始结束时间）和年报（每月开始结束时间） 定时任务，统计前一天的数据，即知道年月日，后台计算start_time, end_time  实验1，夏令时和冬令时 # 美东、中国标准、印度标准、印尼西部 [&#39;UTC&#39;, &#39;US/Eastern&#39;, &#39;Asia/Shanghai&#39;, &#39;Asia/Kolkata&#39;, &#39;Asia/Jakarta&#39;] fmt = &#39;%Y-%m-%d %H:%M:%S %Z%z&#39; for tz in timezones: p_tz = timezone(tz) loc_dt = p_tz.localize(datetime(2015,4,1,8,0,0)) print loc_dt.strftime(fmt) 2015-04-01 08:00:00 EDT-0400 2015-04-01 08:00:00 CST+0800 2015-04-01 08:00:00 IST+0530 2015-04-01 08:00:00 WIB+0700 for tz in timezones: p_tz = timezone(tz) loc_dt = p_tz.localize(datetime(2015,12,1,8,0,0)) print loc_dt.strftime(fmt) 2015-12-01 08:00:00 EST-0500 2015-12-01 08:00:00 CST+0800 2015-12-01 08:00:00 IST+0530 2015-12-01 08:00:00 WIB+0700  实验2 In [146]: now = int(time.</description>
    </item>
    
  </channel>
</rss>