<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>喵大人</title>
    <link>http://guozhaoxia007.github.io/</link>
    <description>Recent content on 喵大人</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 22 Feb 2016 19:21:24 +0800</lastBuildDate>
    <atom:link href="http://guozhaoxia007.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>hugo</title>
      <link>http://guozhaoxia007.github.io/post/2016/02/hugo/</link>
      <pubDate>Mon, 22 Feb 2016 19:21:24 +0800</pubDate>
      
      <guid>http://guozhaoxia007.github.io/post/2016/02/hugo/</guid>
      <description>&lt;ul&gt;
&lt;li&gt;启动本地server&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;hugo server -t hugo-base16-theme&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;生成静态文件到public, baseUrl可以在.git中配置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;hugo -t hugo-base16-theme &amp;ndash;baseUrl=&amp;ldquo;&lt;a href=&#34;http://guozhaoxia007.github.io&amp;quot;&#34;&gt;http://guozhaoxia007.github.io&amp;quot;&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>python IDE</title>
      <link>http://guozhaoxia007.github.io/post/2016/02/python-IDE/</link>
      <pubDate>Mon, 22 Feb 2016 15:48:44 +0800</pubDate>
      
      <guid>http://guozhaoxia007.github.io/post/2016/02/python-IDE/</guid>
      <description>

&lt;h2 id=&#34;vim:58cf1fc3279828b22be4c0dc57e169e6&#34;&gt;VIM&lt;/h2&gt;

&lt;h4 id=&#34;1-参考链接:58cf1fc3279828b22be4c0dc57e169e6&#34;&gt;1. 参考链接：&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yangyangwithgnu/use_vim_as_ide&#34;&gt;https://github.com/yangyangwithgnu/use_vim_as_ide&lt;/a&gt;
&lt;a href=&#34;https://github.com/spf13/spf13-vim&#34;&gt;https://github.com/spf13/spf13-vim&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;2-install:58cf1fc3279828b22be4c0dc57e169e6&#34;&gt;2. install&lt;/h4&gt;

&lt;p&gt;sudo pip install pyflakes&lt;/p&gt;

&lt;p&gt;sudo pip install pylint&lt;/p&gt;

&lt;p&gt;sudo pip install pep8&lt;/p&gt;

&lt;p&gt;或者使用这个vim插件&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;https://github.com/scrooloose/syntastic&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;3-我的vimrc:58cf1fc3279828b22be4c0dc57e169e6&#34;&gt;3. 我的vimrc&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;call pathogen#infect()

syntax enable
syntax on
set background=dark
set number
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set laststatus=2
set ruler
&amp;quot; set cursorcolumn &amp;quot; 突出显示当前列
set cursorline &amp;quot; 突出显示当前行
set hlsearch
set incsearch
set ignorecase
set autoindent
set nowrap
set showcmd       &amp;quot; 显示输入命令
let g:solarized_termcolors=16
colorscheme solarized
set textwidth=79
autocmd FileType text setlocal textwidth=78
&amp;quot; 一旦一行的字符超出79个的话就把那些字符的背景设为红色
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%80v.\+/

filetype on &amp;quot; 检测文件类型
filetype indent on &amp;quot; 针对不同的文件类型采用不同的缩进格式
filetype plugin on &amp;quot; 允许插件
filetype plugin indent on &amp;quot; 启动自动补全

set autoread &amp;quot; 文件修改之后自动载入
set shortmess=atI &amp;quot; 启动的时候不显示那个援助索马里儿童的提示
set scrolloff=7 &amp;quot; 在上下移动光标时，光标的上方或下方至少会保留显示的行数
set ffs=unix,dos,mac &amp;quot; Use Unix as the standard file type

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq=0
let g:syntastic_enable_highlighting=1
let g:syntastic_python_checkers=[&#39;pep8&#39;] &amp;quot; pyflakes, pylint, pep8
let g:syntastic_python_pylint_args=&#39;--disable=C0111&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pycharm:58cf1fc3279828b22be4c0dc57e169e6&#34;&gt;PyCharm&lt;/h2&gt;

&lt;h4 id=&#34;参考链接:58cf1fc3279828b22be4c0dc57e169e6&#34;&gt;参考链接&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/u013088062/article/details/50100121&#34;&gt;http://blog.csdn.net/u013088062/article/details/50100121&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&#34;操作步骤:58cf1fc3279828b22be4c0dc57e169e6&#34;&gt;操作步骤&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在Settings/Preferences对话框中的Inspections页面，键入PEP8来找到所有相关选项，在对应的下拉菜单中选中warning选项；在Ignore erros中添加可忽略警告，C0111&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在Settings/Preferences对话框中的Auto Import中选择Python下的Show import popup&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;在Settings/Preferences对话框中的 File Encoding中IDE Encoding和Project Encoding都使用UTF-8&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;我的settings文件:58cf1fc3279828b22be4c0dc57e169e6&#34;&gt;我的Settings文件&lt;/h4&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/guozhaoxia007/guozhaoxia-hugo-blog/tree/master/content/post/2016/02&#34;&gt;settings.jar&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;sublime-text-2:58cf1fc3279828b22be4c0dc57e169e6&#34;&gt;Sublime Text 2&lt;/h2&gt;

&lt;h4 id=&#34;参考链接-1:58cf1fc3279828b22be4c0dc57e169e6&#34;&gt;参考链接&lt;/h4&gt;

&lt;h4 id=&#34;操作步骤-1:58cf1fc3279828b22be4c0dc57e169e6&#34;&gt;操作步骤&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Ctrl+Shift+p打开命令面板输入install，就可以看到安装列表&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;安装以下插件：sublime linter, pylinter 或 python flake8 lint&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;我的settings文件-1:58cf1fc3279828b22be4c0dc57e169e6&#34;&gt;我的Settings文件&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;{
    &amp;quot;auto_indent&amp;quot;: true,
    &amp;quot;color_scheme&amp;quot;: &amp;quot;Packages/Color Scheme - Default/Twilight.tmTheme&amp;quot;,
    &amp;quot;default_line_ending&amp;quot;: &amp;quot;unix&amp;quot;,
    &amp;quot;detect_indentation&amp;quot;: true,
    &amp;quot;font_size&amp;quot;: 15.0,
    &amp;quot;ignored_packages&amp;quot;:
    [
        &amp;quot;Vintage&amp;quot;
    ],
    &amp;quot;indent_to_bracket&amp;quot;: false,
    &amp;quot;smart_indent&amp;quot;: true,
    &amp;quot;tab_size&amp;quot;: 4,
    &amp;quot;translate_tabs_to_spaces&amp;quot;: true,
    &amp;quot;trim_automatic_white_space&amp;quot;: true,
    &amp;quot;use_tab_stops&amp;quot;: true
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>booklist</title>
      <link>http://guozhaoxia007.github.io/post/2016/booklist/</link>
      <pubDate>Sun, 21 Feb 2016 11:09:30 +0800</pubDate>
      
      <guid>http://guozhaoxia007.github.io/post/2016/booklist/</guid>
      <description></description>
    </item>
    
    <item>
      <title>函数式编程</title>
      <link>http://guozhaoxia007.github.io/post/2016/02/functional_programming/</link>
      <pubDate>Sun, 21 Feb 2016 01:09:41 +0800</pubDate>
      
      <guid>http://guozhaoxia007.github.io/post/2016/02/functional_programming/</guid>
      <description>

&lt;h1 id=&#34;函数式编程:7bd27318b7533519c78b954d5b372338&#34;&gt;函数式编程&lt;/h1&gt;

&lt;h2 id=&#34;高阶函数:7bd27318b7533519c78b954d5b372338&#34;&gt;高阶函数&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def add(x, y, f):
    return f(x) + f(y)
    
&amp;gt;&amp;gt;&amp;gt; add(-3, 2, abs)
5
&amp;gt;&amp;gt;&amp;gt; map(abs, [1, -2, -5])
[1, 2, 5]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;常见的内置高阶函数
map/filter/reduce/sorted&lt;/p&gt;

&lt;h2 id=&#34;返回函数:7bd27318b7533519c78b954d5b372338&#34;&gt;返回函数&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def f():
    print &#39;call f()...&#39;
    # 定义函数g:
    def g():
        print &#39;call g()...&#39;
    # 返回函数g:
    return g

&amp;gt;&amp;gt;&amp;gt; x = f()   # 调用f()
call f()...
&amp;gt;&amp;gt;&amp;gt; x   # 变量x是f()返回的函数：
&amp;lt;function g at 0x1037bf320&amp;gt;
&amp;gt;&amp;gt;&amp;gt; x()   # x指向函数，因此可以调用
call g()...   # 调用x()就是执行g()函数定义的代码
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;延迟计算&lt;/p&gt;

&lt;h2 id=&#34;闭包:7bd27318b7533519c78b954d5b372338&#34;&gt;闭包&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def f():
    print &#39;f()...&#39;
    def g():
        print &#39;g()...&#39;
    return g

# 希望一次返回3个函数，分别计算1x1,2x2,3x3:
def count():
    fs = []
    for i in range(1, 4):
        def f():
            return i*i
        fs.append(f)
    return fs

f1, f2, f3 = count()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;匿名函数:7bd27318b7533519c78b954d5b372338&#34;&gt;匿名函数&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9])
[1, 4, 9, 16, 25, 36, 49, 64, 81]

&amp;gt;&amp;gt;&amp;gt; sorted([1, 3, 9, 5, 0], lambda x,y: -cmp(x,y))
[9, 5, 3, 1, 0]

&amp;gt;&amp;gt;&amp;gt; myabs = lambda x: -x if x &amp;lt; 0 else x 
&amp;gt;&amp;gt;&amp;gt; myabs(-1)
1
&amp;gt;&amp;gt;&amp;gt; myabs(1)
1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;decorator装饰器:7bd27318b7533519c78b954d5b372338&#34;&gt;decorator装饰器&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def f1(x):
...     return x * x
...
&amp;gt;&amp;gt;&amp;gt; def f2(x):
...     return x * 2
...
&amp;gt;&amp;gt;&amp;gt; def new_fn(f):
...     def fn(x):
...         print &#39;call &#39; + f.__name__ + &#39;()&#39;
...         return f(x)
...     return fn
...
&amp;gt;&amp;gt;&amp;gt; g2 = new_fn(f2)
&amp;gt;&amp;gt;&amp;gt; g2(5)
call f2()
10
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; @new_fn
... def f1(x):
...     return x * 2
...
&amp;gt;&amp;gt;&amp;gt; f1(5)
call f1()
10
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Q1: 如果被装饰的函数函数个数不一样怎么办&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time

def performance(f):
    def fn(*args, **kw):
        t1 = time.time()
        r = f(*args, **kw)
        t2 = time.time()
        print &#39;call %s() in %fs&#39; % (f.__name__, (t2 - t1))
        return r
    return fn

performance
def factorial(n):
    return reduce(lambda x,y: x*y, range(1, n+1))

print factorial(10)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;带参数的decorator, @log(&amp;ldquo;INFO&amp;rdquo;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def log(prefix):
    def log_decorator(f):
        def wrapper(*args, **kw):
            print &#39;[%s] %s()...&#39; % (prefix, f.__name__)
            return f(*args, **kw)
        return wrapper
    return log_decorator

@log(&#39;DEBUG&#39;)
def test():
    pass
print test()
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import time

def performance(unit):
    def performance_decorator(f):
        def wrapper(*args, **kw):
            t1 = time.time()
            r = f(*args, **kw)
            t2 = time.time()
            t = (t2 - t1) * 1000 if unit == &#39;ms&#39; else (t2 - t1)
            print &#39;call %s() in %f %s&#39; % (f.__name__, t, unit)
            return r
        return wrapper
    return performance_decorator

@performance(&#39;ms&#39;)
def factorial(n):
    return reduce(lambda x,y: x*y, range(1, n+1))

print factorial(10)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;完善decorator:7bd27318b7533519c78b954d5b372338&#34;&gt;完善decorator&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import functools
def log(f):
    @functools.wraps(f)
    def wrapper(*args, **kw):
        print &#39;call...&#39;
        return f(*args, **kw)
    return wrapper
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;偏函数:7bd27318b7533519c78b954d5b372338&#34;&gt;偏函数&lt;/h2&gt;
</description>
    </item>
    
    <item>
      <title>pytz</title>
      <link>http://guozhaoxia007.github.io/post/2016/02/pytz/</link>
      <pubDate>Sat, 20 Feb 2016 23:18:34 +0800</pubDate>
      
      <guid>http://guozhaoxia007.github.io/post/2016/02/pytz/</guid>
      <description>

&lt;h1 id=&#34;pytz使用:6069e169cf3a7a01ed20689a63d50ef4&#34;&gt;pytz使用&lt;/h1&gt;

&lt;h2 id=&#34;使用场景:6069e169cf3a7a01ed20689a63d50ef4&#34;&gt;使用场景&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;查询，如果前端输入start_time, end_time，后台计算月报（每天开始结束时间）和年报（每月开始结束时间）&lt;/li&gt;
&lt;li&gt;定时任务，统计前一天的数据，即知道年月日，后台计算start_time, end_time&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;实验1-夏令时和冬令时:6069e169cf3a7a01ed20689a63d50ef4&#34;&gt;实验1，夏令时和冬令时&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;# 美东、中国标准、印度标准、印尼西部
[&#39;UTC&#39;, &#39;US/Eastern&#39;, &#39;Asia/Shanghai&#39;, &#39;Asia/Kolkata&#39;, &#39;Asia/Jakarta&#39;]
fmt = &#39;%Y-%m-%d %H:%M:%S %Z%z&#39;

for tz in timezones:
    p_tz = timezone(tz)
    loc_dt = p_tz.localize(datetime(2015,4,1,8,0,0))
    print loc_dt.strftime(fmt)

2015-04-01 08:00:00 EDT-0400
2015-04-01 08:00:00 CST+0800
2015-04-01 08:00:00 IST+0530
2015-04-01 08:00:00 WIB+0700


for tz in timezones:
    p_tz = timezone(tz)
    loc_dt = p_tz.localize(datetime(2015,12,1,8,0,0))
    print loc_dt.strftime(fmt)

2015-12-01 08:00:00 EST-0500
2015-12-01 08:00:00 CST+0800
2015-12-01 08:00:00 IST+0530
2015-12-01 08:00:00 WIB+0700
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;实验2:6069e169cf3a7a01ed20689a63d50ef4&#34;&gt;实验2&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;In [146]: now = int(time.time())

In [147]: now
Out[147]: 1451015286

In [148]: utc_dt = utc.localize(datetime.utcfromtimestamp(now))

In [149]: utc_dt.strftime(fmt)
Out[149]: &#39;2015-12-25 03:48:06 UTC+0000&#39;

In [151]: for tz in timezones:
    p_tz = timezone(tz)
    p_dt = p_tz.normalize(utc_dt.astimezone(p_tz))
    print p_dt.strftime(fmt)
   .....:
2015-12-24 22:48:06 EST-0500
2015-12-25 11:48:06 CST+0800
2015-12-25 09:18:06 IST+0530
2015-12-25 10:48:06 WIB+0700
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mktime:（使用美东时区的datetime）
在东8区执行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int(time.mktime(time.strptime(&#39;2015-12-24 22:48:06&#39;, &#39;%Y-%m-%d %H:%M:%S&#39;))

1450968486
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在美东时区执行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;int(time.mktime(time.strptime(&#39;2015-12-24 22:48:06&#39;, &#39;%Y-%m-%d %H:%M:%S&#39;))
1451015286
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;timestamp-datetime:6069e169cf3a7a01ed20689a63d50ef4&#34;&gt;timestamp -&amp;gt; datetime&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;def timestamp2datetime(timestamp, tzinfo, fmt=&amp;quot;%Y-%m-%d %H:%M:%S %Z%z&amp;quot;):
    utc = pytz.utc
    utc_dt = utc.localize(datetime.utcfromtimestamp(timestamp))
    tz = timezone(tzinfo)
    dt = tz.normalize(utc_dt.astimezone(tz))
    return dt, dt.strftime(fmt)
    
In [178]: timestamp2datetime(1451015286, &#39;Asia/Shanghai&#39;)
Out[178]: &#39;2015-12-25 11:48:06 CST+0800&#39;

In [179]: timestamp2datetime(1451015286, &#39;US/Eastern&#39;)
Out[179]: &#39;2015-12-24 22:48:06 EST-0500&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;美国2015.3.8 02:00（当地时间）进入夏令时：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In [181]: timestamp2datetime(1425794400, &#39;US/Eastern&#39;)
Out[181]: &#39;2015-03-08 01:00:00 EST-0500&#39;
In [204]: timestamp2datetime(1425794400, &#39;Asia/Shanghai&#39;)
Out[204]: &#39;2015-03-08 14:00:00 CST+0800&#39;

In [184]: timestamp2datetime(1425797999, &#39;US/Eastern&#39;)
Out[184]: &#39;2015-03-08 01:59:59 EST-0500&#39;
In [207]: timestamp2datetime(1425797999, &#39;Asia/Shanghai&#39;)
Out[207]: &#39;2015-03-08 14:59:59 CST+0800&#39;

In [180]: timestamp2datetime(1425798000, &#39;US/Eastern&#39;)
Out[180]: &#39;2015-03-08 03:00:00 EDT-0400&#39;  # 注：2点变3点
In [208]: timestamp2datetime(1425798000, &#39;Asia/Shanghai&#39;)
Out[208]: &#39;2015-03-08 15:00:00 CST+0800&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;美国2015.11.1 02:00（当地时间）进入夏令时：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;In [202]: timestamp2datetime(1446357599, &#39;US/Eastern&#39;)
Out[202]: &#39;2015-11-01 01:59:59 EDT-0400&#39;
In [209]: timestamp2datetime(1446357599, &#39;Asia/Shanghai&#39;)
Out[209]: &#39;2015-11-01 13:59:59 CST+0800&#39;

In [203]: timestamp2datetime(1446357600, &#39;US/Eastern&#39;)
Out[203]: &#39;2015-11-01 01:00:00 EST-0500&#39; //注：2点变1点
In [210]: timestamp2datetime(1446357600, &#39;Asia/Shanghai&#39;)
Out[210]: &#39;2015-11-01 14:00:00 CST+0800&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;datetime-timestamp:6069e169cf3a7a01ed20689a63d50ef4&#34;&gt;datetime -&amp;gt; timestamp&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;def datetime2timestamp(dt):
    utc_tz = timezone(&amp;quot;UTC&amp;quot;)
    utc_dt = utc_tz.normalize(dt.astimezone(utc_tz))
    return calendar.timegm(utc_dt.timetuple())


def datetime_to_unixtime(year, month, day, hour=0, minute=0, second=0, tzinfo=&amp;quot;Asia/Shanghai&amp;quot;):
    &amp;quot;&amp;quot;&amp;quot;
    &amp;gt;&amp;gt;&amp;gt; datetime_to_unixtime(2015, 11, 1, hour=1, tzinfo=&#39;US/Eastern&#39;)
    1446357600
    &amp;quot;&amp;quot;&amp;quot;
    tz = timezone(tzinfo)
    dt = datetime(year, month, day, hour, minute, second)
    dt = tz.localize(dt)
    utc_tz = timezone(&amp;quot;UTC&amp;quot;)
    utc_dt = utc_tz.normalize(dt.astimezone(utc_tz))

    return calendar.timegm(utc_dt.timetuple())
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;总结:6069e169cf3a7a01ed20689a63d50ef4&#34;&gt;总结&lt;/h2&gt;

&lt;p&gt;datetime + tzinfo是关键
epochtime转datetime，datetime带tzinfo才知道转给哪个时区的人看
datetime转epochtime，datetime带tzinfo才知道用哪个时区转成UTC时间&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://guozhaoxia007.github.io/about/</link>
      <pubDate>Thu, 18 Feb 2016 22:31:46 +0800</pubDate>
      
      <guid>http://guozhaoxia007.github.io/about/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>