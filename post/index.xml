<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 喵大人的空间</title>
    <link>http://www.gmiao.top/post/</link>
    <description>Recent content in Posts on 喵大人的空间</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Sat, 24 Feb 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://www.gmiao.top/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>R in action</title>
      <link>http://www.gmiao.top/post/2018/02/r-in-action/</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.gmiao.top/post/2018/02/r-in-action/</guid>
      <description>安装 https://cran.r-project.org/</description>
    </item>
    
    <item>
      <title>booklist</title>
      <link>http://www.gmiao.top/post/booklist/</link>
      <pubDate>Sat, 24 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://www.gmiao.top/post/booklist/</guid>
      <description> 2018 R in action Think Stats Think Bayes An Introduction to Statistical Learning  </description>
    </item>
    
    <item>
      <title>the date-line and the poles</title>
      <link>http://www.gmiao.top/post/2018/02/date-line/</link>
      <pubDate>Thu, 08 Feb 2018 15:07:13 +0800</pubDate>
      
      <guid>http://www.gmiao.top/post/2018/02/date-line/</guid>
      <description>The date-line and the poles 今天看postgis文档时，说到所有球形形状的计算都不涉及date-line和poles的概念。那么date-line和poles到底是什么，有什么影响？
先说poles，比较简单，也就是地理极点。对于地球来说就是南极点与北极点。南北极点是唯一的，也比较好确认，也就是行星、卫星或其它较大天体的自转轴与其表面交会的点。
确定了南北极点，那么纬线也就确认了，0纬线也就是赤道线，与自转轴垂直，往南就是南纬，往北就是北纬，由于赤道与自转轴是垂直关系，所以角度最大是90度，即南纬最大90度，北纬最大90度。看图： 确定了纬线，那么就可以找经线了，经线与纬线是垂直的。也就是，纬线瓜分南北半球，经线瓜分东西半球。那么问题来了，0经线是哪里？在地球上每个国家都把太阳升起的时间当作一天的开始，地球被太阳光照射的半个球面形成白昼，而背着太阳光的另外半个球面便是黑夜。但是由于各国家分布在地球各个地方，加上自转，所以见到太阳的时间是不一样的。讲道理的话，任何一条经线都可以称为0经线，但是这样的话，全球时间就不能统一了。所以后来规定了本初子午线（子午线即经线）作为0经线，它经过了格林威治天文台，本初子午线的对面即180经线就是国际日界线，即国际日期变更线（经过这条线后日期要变），当然为了避免同一国家出现2个日期，所以这条线不是直线，而是绕过一些岛屿啥的，是经过了太平洋的一条折线。
概念都清楚了，那么这些线对地球人有什么影响呢？最大的影响就是日期与时间的统一。
“区时系统”规定，地球上每15°经度范围作为一个时区（即太阳1个小时内走过的经度）。 这样，整个地球的表面就被划分为24个时区。各时区的“中央经线”规定为0°（即“本初子午线”）、东西经15°、东西经30°、东西经45°……直到180°经线，在每条中央经线东西两侧各7.5°范围内的所有地点，每一时区都按它的中央子午线来计量时间，即采用它的中央子午线的地方平时，叫做标准时。所以地球上只有24种不同时刻的存在。本初子午线上的地方如果是下午12点，那么在地球背面的地方就是子夜12点。 有了时区系统，问题又来了，假如你坐飞机从西往东越过了日界线，每跨越一个时区，就会把你的表向前拨一个小时加上你旅行消耗的时间，这样当你跨越24个时区回到原地后，你的表比身边的人快了24个小时；相反，当你由东向西周游世界一圈后，你的表就比别人慢24个小时。
当你在从东向西的航行中,因为你是在追赶太阳,所以就感到白天“加长”了；相反,当你从西向东航行时、由于是背离太阳、所以就好像有点白天“短”了的感觉.这样,你就往往会记错日子,把日历翻错.为了避免这种不方便,1884年起人们决定在太平洋中,也即在东经180度经线附近划一条线,规定当各种交通工具自东向西越过此线后,日期增加1天（例如,由7月31日改为8月1日〕,而由西向东越过此线后,日期减少1天（例如, 由8月1日日改为7月31）</description>
    </item>
    
    <item>
      <title>postgis</title>
      <link>http://www.gmiao.top/post/2018/02/postgis/</link>
      <pubDate>Wed, 07 Feb 2018 15:07:13 +0800</pubDate>
      
      <guid>http://www.gmiao.top/post/2018/02/postgis/</guid>
      <description>Chapter 4. Using PostGIS: Data Management and Queries http://postgis.net/docs/manual-2.3/using_postgis_dbmanagement.html
4.1. GIS Objects 4.1.1. OpenGIS WKB and WKT OpenGIS定义了两种空间表达对象：the Well-Known Text(WKT) form和the Well-Known Binary(WKB) form. WKT和WKB都包含了对象的类型和坐标。
WKT举例：
 POINT(0 0)
LINESTRING(0 0,1 1,1 2)
POLYGON((0 0,4 0,4 4,0 4,0 0),(1 1, 2 1, 2 2, 1 2,1 1))
MULTIPOINT((0 0),(1 2))
MULTILINESTRING((0 0,1 1,1 2),(2 3,3 2,5 4))
MULTIPOLYGON(((0 0,4 0,4 4,0 4,0 0),(1 1,2 1,2 2,1 2,1 1)), ((-1 -1,-1 -2,-2 -2,-2 -1,-1 -1)))</description>
    </item>
    
    <item>
      <title>postgis-2</title>
      <link>http://www.gmiao.top/post/2018/02/postgis-2/</link>
      <pubDate>Wed, 07 Feb 2018 15:07:13 +0800</pubDate>
      
      <guid>http://www.gmiao.top/post/2018/02/postgis-2/</guid>
      <description>0. 创建空间字段准备 CREATE EXTENSION postgis;  -- Geometry -- Method 1 SELECT AddGeometryColumn (&#39;scheme&#39;，&#39;cities&#39;, &#39;the_geom&#39;, 4326, &#39;POINT&#39;, 2); AddGeometryColumn( &amp;lt;schema_name&amp;gt;, &amp;lt;table_name&amp;gt;, &amp;lt;column_name&amp;gt;, &amp;lt;srid&amp;gt;, &amp;lt;type&amp;gt;, &amp;lt;dimension&amp;gt; ) -- Method 2 CREATE TABLE ROADS ( ID int4, ROAD_NAME varchar(25), geom geometry(LINESTRING,4326) ); CREATE TABLE global_points ( id SERIAL PRIMARY KEY, name VARCHAR(64), location GEOGRAPHY(POINT,4326) ); -- Method 3 ALTER TABLE roads ADD COLUMN geom2 geometry(LINESTRINGZ,4326);  -- geography CREATE TABLE testgeog(gid serial PRIMARY KEY, the_geog geography(POINT,4326) ); CREATE TABLE testgeog(gid serial PRIMARY KEY, the_geog geography(POINTZ,4326) );  1.</description>
    </item>
    
    <item>
      <title>成都三年</title>
      <link>http://www.gmiao.top/post/2018/04/%E6%88%90%E9%83%BD%E4%B8%89%E5%B9%B4/</link>
      <pubDate>Tue, 26 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.gmiao.top/post/2018/04/%E6%88%90%E9%83%BD%E4%B8%89%E5%B9%B4/</guid>
      <description>连雨不觉春去，一晴方觉夏深。</description>
    </item>
    
    <item>
      <title>Python-ORM</title>
      <link>http://www.gmiao.top/post/2016/04/python-orm/</link>
      <pubDate>Wed, 13 Apr 2016 16:05:10 +0800</pubDate>
      
      <guid>http://www.gmiao.top/post/2016/04/python-orm/</guid>
      <description>list     SQLALchemy Orator Peewee     orm Y Y Y   sql builder Y Y Y   schema builder Y Y Y   raw sql Y Y Y   transaction Y Y Y   读写分离 Y Y Y   connection pool Y multi connection Y   extensions simple Validators(event listener)&amp;hellip; Cache, to json model to dict    demos https://github.</description>
    </item>
    
    <item>
      <title>成都一年</title>
      <link>http://www.gmiao.top/post/2016/03/%E6%88%90%E9%83%BD%E4%B8%80%E5%91%A8%E5%B9%B4/</link>
      <pubDate>Thu, 03 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>http://www.gmiao.top/post/2016/03/%E6%88%90%E9%83%BD%E4%B8%80%E5%91%A8%E5%B9%B4/</guid>
      <description>梦里不知身是客</description>
    </item>
    
    <item>
      <title>mysql分表</title>
      <link>http://www.gmiao.top/post/2016/02/mysql_merge/</link>
      <pubDate>Wed, 24 Feb 2016 11:08:29 +0800</pubDate>
      
      <guid>http://www.gmiao.top/post/2016/02/mysql_merge/</guid>
      <description>需求  提高插入查询速度 便于归档  数据容量估算 5k终端，单个终端1分钟4个点，假设1天运行12小时，5000终端1天将产生：4 * 60 * 12 * 5000 = 14400000条记录，一条记录82bytes
即一天产生：14400000 * 82 = 1180800000bytes = 1126.1 M = 1.1 G 即一月产生：4亿条记录，30G存储
根据容量估算，除去查询效率不考虑外，单是存储问题就很严重，1w终端单月产生8亿60G，10w终端单月产生80亿600G。
产品调研  oneproxy
 优点：
 对应用透明 支持二级分表(tid, timestamp) 多种分表方法(hash, range) 使用简单方便 性能测试，大大提高查询速度，插入速度也不会大的影响 由于使用时间分表，极大方便归档   缺点：
 需手动创建子表   mysql merge
 优点：
 对应用透明 无需引入第三方软件   缺点：
 子表需为MyISAM引擎 无法使用表字段分表（即无法使用时间分表，只能人工分表） 需手动创建子表 一级分表 MERGE storage engine. User-defined partitioning and the MERGE storage engine are not compatible.</description>
    </item>
    
    <item>
      <title>hugo</title>
      <link>http://www.gmiao.top/post/2016/02/hugo/</link>
      <pubDate>Mon, 22 Feb 2016 19:21:24 +0800</pubDate>
      
      <guid>http://www.gmiao.top/post/2016/02/hugo/</guid>
      <description>添加文件  hugo new post/2016/02/new.md
 启动本地server  hugo server -w
 生成静态文件到public, baseUrl可以在.git中配置  hugo -t hugo-nuo</description>
    </item>
    
    <item>
      <title>python IDE</title>
      <link>http://www.gmiao.top/post/2016/02/python-ide/</link>
      <pubDate>Mon, 22 Feb 2016 15:48:44 +0800</pubDate>
      
      <guid>http://www.gmiao.top/post/2016/02/python-ide/</guid>
      <description>VIM 1. 参考链接： https://github.com/yangyangwithgnu/use_vim_as_ide https://github.com/spf13/spf13-vim
2. install sudo pip install pyflakes
sudo pip install pylint
sudo pip install pep8
或者使用这个vim插件
https://github.com/scrooloose/syntastic
3. 我的vimrc call pathogen#infect() syntax enable syntax on set background=dark set number set tabstop=4 set softtabstop=4 set shiftwidth=4 set expandtab set laststatus=2 set ruler &amp;quot; set cursorcolumn &amp;quot; 突出显示当前列 set cursorline &amp;quot; 突出显示当前行 set hlsearch set incsearch set ignorecase set autoindent set nowrap set showcmd &amp;quot; 显示输入命令 let g:solarized_termcolors=16 colorscheme solarized set textwidth=79 autocmd FileType text setlocal textwidth=78 &amp;quot; 一旦一行的字符超出79个的话就把那些字符的背景设为红色 highlight OverLength ctermbg=red ctermfg=white guibg=#592929 match OverLength /\%80v.</description>
    </item>
    
    <item>
      <title>函数式编程</title>
      <link>http://www.gmiao.top/post/2016/02/functional_programming/</link>
      <pubDate>Sun, 21 Feb 2016 01:09:41 +0800</pubDate>
      
      <guid>http://www.gmiao.top/post/2016/02/functional_programming/</guid>
      <description>函数式编程 高阶函数 def add(x, y, f): return f(x) + f(y) &amp;gt;&amp;gt;&amp;gt; add(-3, 2, abs) 5 &amp;gt;&amp;gt;&amp;gt; map(abs, [1, -2, -5]) [1, 2, 5] 常见的内置高阶函数 map/filter/reduce/sorted
返回函数 def f(): print &amp;#39;call f()...&amp;#39; # 定义函数g: def g(): print &amp;#39;call g()...&amp;#39; # 返回函数g: return g &amp;gt;&amp;gt;&amp;gt; x = f() # 调用f() call f()... &amp;gt;&amp;gt;&amp;gt; x # 变量x是f()返回的函数： &amp;lt;function g at 0x1037bf320&amp;gt; &amp;gt;&amp;gt;&amp;gt; x() # x指向函数，因此可以调用 call g()... # 调用x()就是执行g()函数定义的代码 延迟计算
闭包 def f(): print &amp;#39;f().</description>
    </item>
    
    <item>
      <title>pytz</title>
      <link>http://www.gmiao.top/post/2016/02/pytz/</link>
      <pubDate>Sat, 20 Feb 2016 23:18:34 +0800</pubDate>
      
      <guid>http://www.gmiao.top/post/2016/02/pytz/</guid>
      <description>pytz使用 使用场景  查询，如果前端输入start_time, end_time，后台计算月报（每天开始结束时间）和年报（每月开始结束时间） 定时任务，统计前一天的数据，即知道年月日，后台计算start_time, end_time  实验1，夏令时和冬令时 # 美东、中国标准、印度标准、印尼西部 [&amp;#39;UTC&amp;#39;, &amp;#39;US/Eastern&amp;#39;, &amp;#39;Asia/Shanghai&amp;#39;, &amp;#39;Asia/Kolkata&amp;#39;, &amp;#39;Asia/Jakarta&amp;#39;] fmt = &amp;#39;%Y-%m-%d%H:%M:%S %Z%z&amp;#39; for tz in timezones: p_tz = timezone(tz) loc_dt = p_tz.localize(datetime(2015,4,1,8,0,0)) print loc_dt.strftime(fmt) 2015-04-01 08:00:00 EDT-0400 2015-04-01 08:00:00 CST+0800 2015-04-01 08:00:00 IST+0530 2015-04-01 08:00:00 WIB+0700 for tz in timezones: p_tz = timezone(tz) loc_dt = p_tz.localize(datetime(2015,12,1,8,0,0)) print loc_dt.strftime(fmt) 2015-12-01 08:00:00 EST-0500 2015-12-01 08:00:00 CST+0800 2015-12-01 08:00:00 IST+0530 2015-12-01 08:00:00 WIB+0700 实验2 In [146]: now = int(time.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://www.gmiao.top/post/think-stats---chapter-3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.gmiao.top/post/think-stats---chapter-3/</guid>
      <description>Think Stats - Chapter 3 Exploratory Data Analysis in Python Version 2.0.35 Allen B. Downey Green Tea Press Needham, Massachusetts 3. Probability mass functions概率质量函数 本章代码在probability.py中。
3.1 Pmfs 另一种表示分布的方式是概率质量函数(PMF)，即每个值与它的概率的映射。概率是在同样样本大小n中一部分的频率。从频率得到概率，我们可以除以n,这叫做正态化。
给出一个Hist,我们可以生成一个值与概率映射的字典：
n = hist.Total() d = {} for x, freq in hist.Items(): d[x] = freq / n  或者我们可以用Pmf类。就像Hist,Pmf结构可以传入一个list， pandas Series, dictionary, Hist或其它Pmf对象。下面是以List的例子：
&amp;gt;&amp;gt;&amp;gt; import thinkstats2 &amp;gt;&amp;gt;&amp;gt; pmf = thinkstats2.Pmf([1, 2, 2, 3, 5]) &amp;gt;&amp;gt;&amp;gt; pmf Pmf({1: 0.2, 2: 0.4, 3: 0.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://www.gmiao.top/post/think-stats---chapter-4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.gmiao.top/post/think-stats---chapter-4/</guid>
      <description>Think Stats - Chapter 4 Exploratory Data Analysis in Python Version 2.0.35 Allen B. Downey Green Tea Press Needham, Massachusetts 4 Cumulative distribution functions 4.1 THe limits of PMFs 4.2 Percentiles 4.3 CDFs 4.4 Representing CDFs 4.5 Comparing CDFs 4.6 Percentile-based statistics 4.7 Random numbers 4.8 Comparing percentile ranks 4.9 Exercises 4.10 Glossary 5 Modeling distributions 5.1 The exponential distribution 5.2 the normal distribution 5.3 Normal probability plot 5.4 The lognormal distribution 5.</description>
    </item>
    
    <item>
      <title></title>
      <link>http://www.gmiao.top/post/think-stats-chapter-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.gmiao.top/post/think-stats-chapter-2/</guid>
      <description>Think Stats - Chapter 2 Exploratory Data Analysis in Python Version 2.0.35 Allen B. Downey Green Tea Press Needham, Massachusetts 2 分布式 2.1 Historgrams 描述变量的最好方法之一是报告数据集中出现的值，以及每个值出现多少次。这种描述称为变量的分布。
分布最常见的表示是直方图，它是显示每个值的频率的图。在这种情况下，“频率”是指值出现的次数。
在Python中，计算频率的一个有效方法是用字典。定义一个序列，t
hist = {} for x in t: hist[x] = hist.get(x, 0) + 1  字典的结果是值和频率的映射。或者，你可以使用集合模块中定义的计数器类：
from collections import Counter counter = Counter(t)  Counter计数器对象的结果，是字典的一个子类。
另一个选项是使用pandas模块里的value_counts。在这本书里我创建了一个类，Hist,表示直方图，并提供操作他们的方法。
2.2 Representing histograms代表直方图 Hist构造函数可以采取一个序列，字典，pandas系列，或其它Hist. 你可以实例化一个Hist对象：
&amp;gt;&amp;gt;&amp;gt; import thinkstats2 &amp;gt;&amp;gt;&amp;gt; hist = thinkstats2.Hist([1, 2, 2, 3, 5]) &amp;gt;&amp;gt;&amp;gt; hist Hist({1: 1, 2: 2, 3: 1, 5: 1})  Hist对象提供Freq, 传入一个值返回它的频率：</description>
    </item>
    
    <item>
      <title></title>
      <link>http://www.gmiao.top/post/think-stats/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.gmiao.top/post/think-stats/</guid>
      <description>Think Stats Exploratory Data Analysis in Python Version 2.0.35 Allen B. Downey Green Tea Press Needham, Massachusetts 前言 这本书介绍了探索性数据分析的实用工具。本书的组织遵循了我开始处理数据集时使用的流程。
 导入和清理：无论数据是什么格式，通常会花一段时间和精力去读取，清理和转换数据，并检查所有的内容是否完整地通过了翻译过程。 单变量探索：我通常一次检查一个变量，找出变量的含义，查看值的分布，选择适当的汇总统计数据。 成对探索：为了识别变量之间可能存在的关系，我查看表和散点图，计算相关性和线性拟合。 多变量分析：如果变量之间存在明显的关系，我使用多元回归来增加控制变量，并研究更复杂的关系。 估计和假设检验：当报告统计结果时，回答三个问题很重要：影响有多大？如果再次运行相同的测量，我们应该期待有多大的可变性？明显的效果可能是偶然的吗？ 可视化：在探索过程中，可视化是寻找可能的关系和效果的重要工具。如果一个明显的效果能经受住审查，可视化是一种有效的交流结果的方式。  这本书采用了一种计算方法，它比数学方法有许多优点： - 我使用Python代码展示大多数想法，而不是数学符号。一般来说，Python代码更易读，也因为它是可执行的，读者可以下载它，运行它，并修改它。 - 每个章节都包括读者可用来部署和巩固学习的练习。当你编写程序时，你用代码表达你的理解；当你调试程序时，你也纠正了你的理解。 - 一些练习包括测试统计行为的实验。例如，您可以通过生成随机抽样和计算它们的总和来探索中心极限定理（CLT）。由此产生的可视化演示了为什么CLT生效，什么时候又不生效。 - 一些很难掌握的数学概念很容易通过模拟来理解。例如，我们近似的p值的随机模拟，增强了P值的意义。 - 因为这本书是基于通用编程语言（Python）的，所以读者可以从几乎所有的源中导入数据。它们不仅限于对特定统计工具进行清理和格式化的数据集。
这本书适合以项目为基础的方法。在我的课堂上，学生们学习一个学期的项目，要求他们提出一个统计问题，找到一个能解决这个问题的数据集，并将他们所学的每一种技术应用到他们自己的数据中。
为了证明我的统计分析方法，这本书提出了一个贯穿所有章节的案例研究。它使用的数据来自两个来源： - 全国家庭成长调查（NSFG），由美国疾病控制和预防中心（CDC）进行收集“家庭生活信息、结婚、离婚、怀孕、不孕、使用避孕方法，以及男性和女性的健康&amp;rdquo;。见 https://www.cdc.gov/nchs/nsfg.htm. - 行为风险因素监测系统（BRFSS），由国家慢性病预防和健康促进”追踪美国的卫生条件和危险行为中心进行。” 见 https://www.cdc.gov/BRFSS/
其它例子的数据来源于IRS，the U.S. Census,和the Boston Marathon.
这第二版的《思考统计》包括第一章的章节，其中许多章节被大量修订，关于回归、时间序列分析、生存分析和分析方法的新章节。以前的版本没有使用pandas, SciPy或StatsModels，所以这些是新的。
0.1 How I wrote this book &amp;hellip; 有用网站 http://www.reddit.com/r/statistics
0.2 Using the code 这本书用到的代码和数据在https://github.com/AllenDowney/ThinkStats2. &amp;hellip; 作者用的开发环境 http://continuum.</description>
    </item>
    
  </channel>
</rss>